{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/components/ui/button.jsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,IAAA,sNAAG,EACxB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,MAAM,uBAAS,uNAAgB,MAAC,QAA0D;QAAzD,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO;IACtF,MAAM,OAAO,UAAU,uNAAI,GAAG;IAC9B,qBACG,yOAAC;QACA,WAAW,IAAA,iKAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAEf;;AACA,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/components/ui/card.jsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-xl border bg-card text-card-foreground shadow\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,uNAAgB,MAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACpD,yOAAC;QACC,KAAK;QACL,WAAW,IAAA,iKAAE,EAAC,yDAAyD;QACtE,GAAG,KAAK;;;;;;;;AAEb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,uNAAgB,OAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBAC1D,yOAAC;QACC,KAAK;QACL,WAAW,IAAA,iKAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAEb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,uNAAgB,OAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACzD,yOAAC;QACC,KAAK;QACL,WAAW,IAAA,iKAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;;;AAEb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,uNAAgB,OAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBAC/D,yOAAC;QACC,KAAK;QACL,WAAW,IAAA,iKAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAEb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,uNAAgB,OAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBAC3D,yOAAC;QAAI,KAAK;QAAK,WAAW,IAAA,iKAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,uNAAgB,QAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBAC1D,yOAAC;QACC,KAAK;QACL,WAAW,IAAA,iKAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAEb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/components/ui/radio-group.jsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (<RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />);\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    (<RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}>\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>)\n  );\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,uNAAgB,MAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;IAC1D,qBAAQ,yOAAC,iOAAwB;QAAC,WAAW,IAAA,iKAAE,EAAC,cAAc;QAAa,GAAG,KAAK;QAAE,KAAK;;;;;;AAC5F;;AACA,WAAW,WAAW,GAAG,iOAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,uNAAgB,OAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;IAC9D,qBACG,yOAAC,iOAAwB;QACxB,KAAK;QACL,WAAW,IAAA,iKAAE,EACX,gMACA;QAED,GAAG,KAAK;kBACT,cAAA,yOAAC,sOAA6B;YAAC,WAAU;sBACvC,cAAA,yOAAC,+PAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;;AACA,eAAe,WAAW,GAAG,iOAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/components/ui/label.jsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,sNAAG,EACvB;AAGF,MAAM,sBAAQ,uNAAgB,MAAC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACrD,yOAAC,wNAAmB;QAAC,KAAK;QAAK,WAAW,IAAA,iKAAE,EAAC,iBAAiB;QAAa,GAAG,KAAK;;;;;;;;AAErF,MAAM,WAAW,GAAG,wNAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/actions/interview.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst API_KEY = process.env.GEMINI_API_KEY;\nif (!API_KEY) {\n  // More explicit logging to help debug when the mock-generation fails on deploys/local\n  console.warn(\"GEMINI_API_KEY is not set. generateQuiz and improvement tip generation will fail without it.\");\n}\n\nconst genAI = new GoogleGenerativeAI(API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n// Added: five extra questions to always append to generated quizzes\nconst EXTRA_QUESTIONS = [\n  {\n    question: \"What is the average-case time complexity of QuickSort?\",\n    options: [\"O(n)\", \"O(n log n)\", \"O(n^2)\", \"O(log n)\"],\n    correctAnswer: \"O(n log n)\",\n    explanation: \"QuickSort on average runs in O(n log n) time using a good pivot strategy.\",\n  },\n  {\n    question: \"Which data structure uses FIFO order?\",\n    options: [\"Stack\", \"Queue\", \"Heap\", \"Tree\"],\n    correctAnswer: \"Queue\",\n    explanation: \"Queue follows First-In-First-Out ordering.\",\n  },\n  {\n    question: \"Which HTTP status code indicates a successful GET request?\",\n    options: [\"200\", \"301\", \"400\", \"500\"],\n    correctAnswer: \"200\",\n    explanation: \"200 OK indicates the request succeeded and the server returned the requested resource.\",\n  },\n  {\n    question: \"In relational databases, which normal form removes transitive dependencies?\",\n    options: [\"1NF\", \"2NF\", \"3NF\", \"BCNF\"],\n    correctAnswer: \"3NF\",\n    explanation: \"Third Normal Form (3NF) removes transitive dependencies among non-key attributes.\",\n  },\n  {\n    question: \"Which algorithm is commonly used to find the shortest path in a weighted graph with non-negative weights?\",\n    options: [\"DFS\", \"BFS\", \"Dijkstra's algorithm\", \"Prim's algorithm\"],\n    correctAnswer: \"Dijkstra's algorithm\",\n    explanation: \"Dijkstra's algorithm computes shortest paths for graphs with non-negative edge weights.\",\n  },\n];\n\nexport async function generateQuiz() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    select: {\n      industry: true,\n      skills: true,\n    },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  const prompt = `\n    Generate 10 technical interview questions for a ${\n      user.industry\n    } professional${\n    user.skills?.length ? ` with expertise in ${user.skills.join(\", \")}` : \"\"\n  }.\n    \n    Each question should be multiple choice with 4 options.\n    \n    Return the response in this JSON format only, no additional text:\n    {\n      \"questions\": [\n        {\n          \"question\": \"string\",\n          \"options\": [\"string\", \"string\", \"string\", \"string\"],\n          \"correctAnswer\": \"string\",\n          \"explanation\": \"string\"\n        }\n      ]\n    }\n  `;\n\n  try {\n    const result = await model.generateContent(prompt);\n\n    // DEBUG: log raw result to server console to inspect shape if something breaks\n    console.debug(\"generateQuiz raw result:\", result);\n\n    const response = result.response;\n    // IMPORTANT: await the text() promise\n    const text = await response.text();\n    const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n    // DEBUG: log cleaned text to help diagnose JSON errors\n    console.debug(\"generateQuiz cleaned text:\", cleanedText);\n\n    const quiz = JSON.parse(cleanedText);\n\n    // ensure quiz.questions is an array then append the 5 extra questions\n    const questions = Array.isArray(quiz.questions) ? quiz.questions : [];\n    const finalQuestions = [...questions.slice(0, 10), ...EXTRA_QUESTIONS];\n\n    return finalQuestions;\n  } catch (error) {\n    console.error(\"Error generating quiz:\", error);\n\n    // Fallback: return a small mock quiz plus the extra 5 questions so UI always shows them\n    const fallback = [\n      {\n        question: \"Fallback: What is a common data structure for LIFO?\",\n        options: [\"Queue\", \"Stack\", \"Tree\", \"Graph\"],\n        correctAnswer: \"Stack\",\n        explanation: \"A stack follows Last-In-First-Out (LIFO).\",\n      },\n      {\n        question: \"Fallback: Which traversal uses a queue?\",\n        options: [\"DFS\", \"BFS\", \"Preorder\", \"Postorder\"],\n        correctAnswer: \"BFS\",\n        explanation: \"Breadth-first search (BFS) uses a queue to traverse level by level.\",\n      },\n      {\n        question: \"Fallback: What HTTP method is typically used to create a resource?\",\n        options: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        correctAnswer: \"POST\",\n        explanation: \"POST is commonly used to create resources on the server.\",\n      },\n    ];\n\n    return [...fallback, ...EXTRA_QUESTIONS];\n  }\n}\n\nexport async function saveQuizResult(questions, answers, score) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  const questionResults = questions.map((q, index) => ({\n    question: q.question,\n    answer: q.correctAnswer,\n    userAnswer: answers[index],\n    isCorrect: q.correctAnswer === answers[index],\n    explanation: q.explanation,\n  }));\n\n  // Get wrong answers\n  const wrongAnswers = questionResults.filter((q) => !q.isCorrect);\n\n  // Only generate improvement tips if there are wrong answers\n  let improvementTip = null;\n  if (wrongAnswers.length > 0 && API_KEY) {\n    const wrongQuestionsText = wrongAnswers\n      .map(\n        (q) =>\n          `Question: \"${q.question}\"\\nCorrect Answer: \"${q.answer}\"\\nUser Answer: \"${q.userAnswer}\"`\n      )\n      .join(\"\\n\\n\");\n\n    const improvementPrompt = `\n      The user got the following ${user.industry} technical interview questions wrong:\n\n      ${wrongQuestionsText}\n\n      Based on these mistakes, provide a concise, specific improvement tip.\n      Focus on the knowledge gaps revealed by these wrong answers.\n      Keep the response under 2 sentences and make it encouraging.\n      Don't explicitly mention the mistakes, instead focus on what to learn/practice.\n    `;\n\n    try {\n      const tipResult = await model.generateContent(improvementPrompt);\n      const tipRaw = await tipResult.response.text();\n      const tipClean = tipRaw.replace(/```(?:json)?\\n?/g, \"\").trim();\n      improvementTip = tipClean;\n      console.debug(\"improvement tip:\", improvementTip);\n    } catch (error) {\n      console.error(\"Error generating improvement tip:\", error);\n      // Continue without improvement tip if generation fails.\n    }\n  }\n\n  try {\n    const assessment = await db.assessment.create({\n      data: {\n        userId: user.id,\n        quizScore: score,\n        questions: questionResults,\n        category: \"Technical\",\n        improvementTip,\n      },\n    });\n\n    return assessment;\n  } catch (error) {\n    console.error(\"Error saving quiz result:\", error);\n    throw new Error(\"Failed to save quiz result\");\n  }\n}\n\nexport async function getAssessments() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  try {\n    const assessments = await db.assessment.findMany({\n      where: {\n        userId: user.id,\n      },\n      orderBy: {\n        createdAt: \"asc\",\n      },\n    });\n\n    return assessments;\n  } catch (error) {\n    console.error(\"Error fetching assessments:\", error);\n    throw new Error(\"Failed to fetch assessments\");\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAiDsB,eAAA,WAAA,GAAA,IAAA,8RAAA,EAAA,8CAAA,mRAAA,EAAA,KAAA,GAAA,yRAAA,EAAA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/actions/interview.js"],"sourcesContent":["\"use server\";\n\nimport { db } from \"@/lib/prisma\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst API_KEY = process.env.GEMINI_API_KEY;\nif (!API_KEY) {\n  // More explicit logging to help debug when the mock-generation fails on deploys/local\n  console.warn(\"GEMINI_API_KEY is not set. generateQuiz and improvement tip generation will fail without it.\");\n}\n\nconst genAI = new GoogleGenerativeAI(API_KEY);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n// Added: five extra questions to always append to generated quizzes\nconst EXTRA_QUESTIONS = [\n  {\n    question: \"What is the average-case time complexity of QuickSort?\",\n    options: [\"O(n)\", \"O(n log n)\", \"O(n^2)\", \"O(log n)\"],\n    correctAnswer: \"O(n log n)\",\n    explanation: \"QuickSort on average runs in O(n log n) time using a good pivot strategy.\",\n  },\n  {\n    question: \"Which data structure uses FIFO order?\",\n    options: [\"Stack\", \"Queue\", \"Heap\", \"Tree\"],\n    correctAnswer: \"Queue\",\n    explanation: \"Queue follows First-In-First-Out ordering.\",\n  },\n  {\n    question: \"Which HTTP status code indicates a successful GET request?\",\n    options: [\"200\", \"301\", \"400\", \"500\"],\n    correctAnswer: \"200\",\n    explanation: \"200 OK indicates the request succeeded and the server returned the requested resource.\",\n  },\n  {\n    question: \"In relational databases, which normal form removes transitive dependencies?\",\n    options: [\"1NF\", \"2NF\", \"3NF\", \"BCNF\"],\n    correctAnswer: \"3NF\",\n    explanation: \"Third Normal Form (3NF) removes transitive dependencies among non-key attributes.\",\n  },\n  {\n    question: \"Which algorithm is commonly used to find the shortest path in a weighted graph with non-negative weights?\",\n    options: [\"DFS\", \"BFS\", \"Dijkstra's algorithm\", \"Prim's algorithm\"],\n    correctAnswer: \"Dijkstra's algorithm\",\n    explanation: \"Dijkstra's algorithm computes shortest paths for graphs with non-negative edge weights.\",\n  },\n];\n\nexport async function generateQuiz() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n    select: {\n      industry: true,\n      skills: true,\n    },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  const prompt = `\n    Generate 10 technical interview questions for a ${\n      user.industry\n    } professional${\n    user.skills?.length ? ` with expertise in ${user.skills.join(\", \")}` : \"\"\n  }.\n    \n    Each question should be multiple choice with 4 options.\n    \n    Return the response in this JSON format only, no additional text:\n    {\n      \"questions\": [\n        {\n          \"question\": \"string\",\n          \"options\": [\"string\", \"string\", \"string\", \"string\"],\n          \"correctAnswer\": \"string\",\n          \"explanation\": \"string\"\n        }\n      ]\n    }\n  `;\n\n  try {\n    const result = await model.generateContent(prompt);\n\n    // DEBUG: log raw result to server console to inspect shape if something breaks\n    console.debug(\"generateQuiz raw result:\", result);\n\n    const response = result.response;\n    // IMPORTANT: await the text() promise\n    const text = await response.text();\n    const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n    // DEBUG: log cleaned text to help diagnose JSON errors\n    console.debug(\"generateQuiz cleaned text:\", cleanedText);\n\n    const quiz = JSON.parse(cleanedText);\n\n    // ensure quiz.questions is an array then append the 5 extra questions\n    const questions = Array.isArray(quiz.questions) ? quiz.questions : [];\n    const finalQuestions = [...questions.slice(0, 10), ...EXTRA_QUESTIONS];\n\n    return finalQuestions;\n  } catch (error) {\n    console.error(\"Error generating quiz:\", error);\n\n    // Fallback: return a small mock quiz plus the extra 5 questions so UI always shows them\n    const fallback = [\n      {\n        question: \"Fallback: What is a common data structure for LIFO?\",\n        options: [\"Queue\", \"Stack\", \"Tree\", \"Graph\"],\n        correctAnswer: \"Stack\",\n        explanation: \"A stack follows Last-In-First-Out (LIFO).\",\n      },\n      {\n        question: \"Fallback: Which traversal uses a queue?\",\n        options: [\"DFS\", \"BFS\", \"Preorder\", \"Postorder\"],\n        correctAnswer: \"BFS\",\n        explanation: \"Breadth-first search (BFS) uses a queue to traverse level by level.\",\n      },\n      {\n        question: \"Fallback: What HTTP method is typically used to create a resource?\",\n        options: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        correctAnswer: \"POST\",\n        explanation: \"POST is commonly used to create resources on the server.\",\n      },\n    ];\n\n    return [...fallback, ...EXTRA_QUESTIONS];\n  }\n}\n\nexport async function saveQuizResult(questions, answers, score) {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  const questionResults = questions.map((q, index) => ({\n    question: q.question,\n    answer: q.correctAnswer,\n    userAnswer: answers[index],\n    isCorrect: q.correctAnswer === answers[index],\n    explanation: q.explanation,\n  }));\n\n  // Get wrong answers\n  const wrongAnswers = questionResults.filter((q) => !q.isCorrect);\n\n  // Only generate improvement tips if there are wrong answers\n  let improvementTip = null;\n  if (wrongAnswers.length > 0 && API_KEY) {\n    const wrongQuestionsText = wrongAnswers\n      .map(\n        (q) =>\n          `Question: \"${q.question}\"\\nCorrect Answer: \"${q.answer}\"\\nUser Answer: \"${q.userAnswer}\"`\n      )\n      .join(\"\\n\\n\");\n\n    const improvementPrompt = `\n      The user got the following ${user.industry} technical interview questions wrong:\n\n      ${wrongQuestionsText}\n\n      Based on these mistakes, provide a concise, specific improvement tip.\n      Focus on the knowledge gaps revealed by these wrong answers.\n      Keep the response under 2 sentences and make it encouraging.\n      Don't explicitly mention the mistakes, instead focus on what to learn/practice.\n    `;\n\n    try {\n      const tipResult = await model.generateContent(improvementPrompt);\n      const tipRaw = await tipResult.response.text();\n      const tipClean = tipRaw.replace(/```(?:json)?\\n?/g, \"\").trim();\n      improvementTip = tipClean;\n      console.debug(\"improvement tip:\", improvementTip);\n    } catch (error) {\n      console.error(\"Error generating improvement tip:\", error);\n      // Continue without improvement tip if generation fails.\n    }\n  }\n\n  try {\n    const assessment = await db.assessment.create({\n      data: {\n        userId: user.id,\n        quizScore: score,\n        questions: questionResults,\n        category: \"Technical\",\n        improvementTip,\n      },\n    });\n\n    return assessment;\n  } catch (error) {\n    console.error(\"Error saving quiz result:\", error);\n    throw new Error(\"Failed to save quiz result\");\n  }\n}\n\nexport async function getAssessments() {\n  const { userId } = await auth();\n  if (!userId) throw new Error(\"Unauthorized\");\n\n  const user = await db.user.findUnique({\n    where: { clerkUserId: userId },\n  });\n\n  if (!user) throw new Error(\"User not found\");\n\n  try {\n    const assessments = await db.assessment.findMany({\n      where: {\n        userId: user.id,\n      },\n      orderBy: {\n        createdAt: \"asc\",\n      },\n    });\n\n    return assessments;\n  } catch (error) {\n    console.error(\"Error fetching assessments:\", error);\n    throw new Error(\"Failed to fetch assessments\");\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAuIsB,iBAAA,WAAA,GAAA,IAAA,8RAAA,EAAA,8CAAA,mRAAA,EAAA,KAAA,GAAA,yRAAA,EAAA","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/components/ui/progress.jsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}>\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,uNAAgB,MAAC,QAAiC;QAAhC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO;yBAC/D,yOAAC,2NAAsB;QACrB,KAAK;QACL,WAAW,IAAA,iKAAE,EACX,kEACA;QAED,GAAG,KAAK;kBACT,cAAA,yOAAC,gOAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,AAAC,eAAiC,OAAnB,MAAM,CAAC,SAAS,CAAC,GAAE;YAAI;;;;;;;;;;;;;AAGhE,SAAS,WAAW,GAAG,2NAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/app/%28main%29/interview/_components/quiz-result.jsx"],"sourcesContent":["\"use client\";\n\nimport { Trophy, CheckCircle2, XCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function QuizResult({\n  result,\n  hideStartNew = false,\n  onStartNew,\n}) {\n  if (!result) return null;\n\n  return (\n    <div className=\"mx-auto\">\n      <h1 className=\"flex items-center gap-2 text-3xl gradient-title\">\n        <Trophy className=\"h-6 w-6 text-yellow-500\" />\n        Quiz Results\n      </h1>\n\n      <CardContent className=\"space-y-6\">\n        {/* Score Overview */}\n        <div className=\"text-center space-y-2\">\n          <h3 className=\"text-2xl font-bold\">{result.quizScore.toFixed(1)}%</h3>\n          <Progress value={result.quizScore} className=\"w-full\" />\n        </div>\n\n        {/* Improvement Tip */}\n        {result.improvementTip && (\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <p className=\"font-medium\">Improvement Tip:</p>\n            <p className=\"text-muted-foreground\">{result.improvementTip}</p>\n          </div>\n        )}\n\n        {/* Questions Review */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium\">Question Review</h3>\n          {result.questions.map((q, index) => (\n            <div key={index} className=\"border rounded-lg p-4 space-y-2\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <p className=\"font-medium\">{q.question}</p>\n                {q.isCorrect ? (\n                  <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                ) : (\n                  <XCircle className=\"h-5 w-5 text-red-500 flex-shrink-0\" />\n                )}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                <p>Your answer: {q.userAnswer}</p>\n                {!q.isCorrect && <p>Correct answer: {q.answer}</p>}\n              </div>\n              <div className=\"text-sm bg-muted p-2 rounded\">\n                <p className=\"font-medium\">Explanation:</p>\n                <p>{q.explanation}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n\n      {!hideStartNew && (\n        <CardFooter>\n          <Button onClick={onStartNew} className=\"w-full\">\n            Start New Quiz\n          </Button>\n        </CardFooter>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AALA;;;;;;AAOe,SAAS,WAAW,KAIlC;QAJkC,EACjC,MAAM,EACN,eAAe,KAAK,EACpB,UAAU,EACX,GAJkC;IAKjC,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,yOAAC;QAAI,WAAU;;0BACb,yOAAC;gBAAG,WAAU;;kCACZ,yOAAC,+PAAM;wBAAC,WAAU;;;;;;oBAA4B;;;;;;;0BAIhD,yOAAC,uLAAW;gBAAC,WAAU;;kCAErB,yOAAC;wBAAI,WAAU;;0CACb,yOAAC;gCAAG,WAAU;;oCAAsB,OAAO,SAAS,CAAC,OAAO,CAAC;oCAAG;;;;;;;0CAChE,yOAAC,wLAAQ;gCAAC,OAAO,OAAO,SAAS;gCAAE,WAAU;;;;;;;;;;;;oBAI9C,OAAO,cAAc,kBACpB,yOAAC;wBAAI,WAAU;;0CACb,yOAAC;gCAAE,WAAU;0CAAc;;;;;;0CAC3B,yOAAC;gCAAE,WAAU;0CAAyB,OAAO,cAAc;;;;;;;;;;;;kCAK/D,yOAAC;wBAAI,WAAU;;0CACb,yOAAC;gCAAG,WAAU;0CAAc;;;;;;4BAC3B,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,sBACxB,yOAAC;oCAAgB,WAAU;;sDACzB,yOAAC;4CAAI,WAAU;;8DACb,yOAAC;oDAAE,WAAU;8DAAe,EAAE,QAAQ;;;;;;gDACrC,EAAE,SAAS,iBACV,yOAAC,oRAAY;oDAAC,WAAU;;;;;yEAExB,yOAAC,sQAAO;oDAAC,WAAU;;;;;;;;;;;;sDAGvB,yOAAC;4CAAI,WAAU;;8DACb,yOAAC;;wDAAE;wDAAc,EAAE,UAAU;;;;;;;gDAC5B,CAAC,EAAE,SAAS,kBAAI,yOAAC;;wDAAE;wDAAiB,EAAE,MAAM;;;;;;;;;;;;;sDAE/C,yOAAC;4CAAI,WAAU;;8DACb,yOAAC;oDAAE,WAAU;8DAAc;;;;;;8DAC3B,yOAAC;8DAAG,EAAE,WAAW;;;;;;;;;;;;;mCAfX;;;;;;;;;;;;;;;;;YAsBf,CAAC,8BACA,yOAAC,sLAAU;0BACT,cAAA,yOAAC,oLAAM;oBAAC,SAAS;oBAAY,WAAU;8BAAS;;;;;;;;;;;;;;;;;AAO1D;KAhEwB","debugId":null}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/hooks/use-fetch.js"],"sourcesContent":["import { useState } from \"react\";\nimport { toast } from \"sonner\";\n\nconst useFetch = (cb) => {\n  const [data, setData] = useState(undefined);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(null);\n\n  const fn = async (...args) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await cb(...args);\n      setData(response);\n      setError(null);\n    } catch (error) {\n      setError(error);\n      toast.error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { data, loading, error, fn, setData };\n};\n\nexport default useFetch;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEA,MAAM,WAAW,CAAC;;IAChB,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,qNAAQ,EAAC;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,qNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,qNAAQ,EAAC;IAEnC,MAAM,KAAK;yCAAU;YAAA;;QACnB,WAAW;QACX,SAAS;QAET,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,QAAQ;YACR,SAAS;QACX,EAAE,OAAO,OAAO;YACd,SAAS;YACT,gMAAK,CAAC,KAAK,CAAC,MAAM,OAAO;QAC3B,SAAU;YACR,WAAW;QACb;IACF;IAEA,OAAO;QAAE;QAAM;QAAS;QAAO;QAAI;IAAQ;AAC7C;GAtBM;uCAwBS","debugId":null}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":["file:///home/haripriya/Desktop/hack/ai-career-coach/app/%28main%29/interview/_components/quiz.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { generateQuiz, saveQuizResult } from \"@/actions/interview\";\nimport QuizResult from \"./quiz-result\";\nimport useFetch from \"@/hooks/use-fetch\";\nimport { BarLoader } from \"react-spinners\";\n\nexport default function Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const {\n    loading: generatingQuiz,\n    fn: generateQuizFn,\n    data: quizData,\n    error: generateError,\n  } = useFetch(generateQuiz);\n\n  const {\n    loading: savingResult,\n    fn: saveQuizResultFn,\n    data: resultData,\n    setData: setResultData,\n    error: saveError,\n  } = useFetch(saveQuizResult);\n\n  useEffect(() => {\n    if (quizData) {\n      setAnswers(new Array(quizData.length).fill(null));\n    }\n  }, [quizData]);\n\n  const handleAnswer = (answer) => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestion] = answer;\n    setAnswers(newAnswers);\n  };\n\n  const handleNext = () => {\n    if (currentQuestion < quizData.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setShowExplanation(false);\n    } else {\n      finishQuiz();\n    }\n  };\n\n  const calculateScore = () => {\n    let correct = 0;\n    answers.forEach((answer, index) => {\n      if (answer === quizData[index].correctAnswer) {\n        correct++;\n      }\n    });\n    return (correct / quizData.length) * 100;\n  };\n\n  const finishQuiz = async () => {\n    const score = calculateScore();\n    try {\n      await saveQuizResultFn(quizData, answers, score);\n      toast.success(\"Quiz completed!\");\n    } catch (error) {\n      toast.error(error.message || \"Failed to save quiz results\");\n    }\n  };\n\n  const startNewQuiz = () => {\n    setCurrentQuestion(0);\n    setAnswers([]);\n    setShowExplanation(false);\n    generateQuizFn();\n    setResultData(null);\n  };\n\n  if (generatingQuiz) {\n    return <BarLoader className=\"mt-4\" width={\"100%\"} color=\"gray\" />;\n  }\n\n  // Show generation error and allow retry\n  if (generateError) {\n    return (\n      <Card className=\"mx-2\">\n        <CardHeader>\n          <CardTitle>Failed to generate quiz</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-500\">{generateError.message || \"An error occurred while generating questions.\"}</p>\n        </CardContent>\n        <CardFooter>\n          <Button onClick={generateQuizFn} className=\"w-full\">\n            Retry\n          </Button>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  // Show results if quiz is completed\n  if (resultData) {\n    return (\n      <div className=\"mx-2\">\n        <QuizResult result={resultData} onStartNew={startNewQuiz} />\n      </div>\n    );\n  }\n\n  if (!quizData) {\n    return (\n      <Card className=\"mx-2\">\n        <CardHeader>\n          <CardTitle>Ready to test your knowledge?</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">\n            This quiz contains 10 questions specific to your industry and\n            skills. Take your time and choose the best answer for each question.\n          </p>\n        </CardContent>\n        <CardFooter>\n          <Button onClick={generateQuizFn} className=\"w-full\">\n            Start Quiz\n          </Button>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  const question = quizData[currentQuestion];\n\n  return (\n    <Card className=\"mx-2\">\n      <CardHeader>\n        <CardTitle>\n          Question {currentQuestion + 1} of {quizData.length}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-lg font-medium\">{question.question}</p>\n        <RadioGroup\n          onValueChange={handleAnswer}\n          value={answers[currentQuestion]}\n          className=\"space-y-2\"\n        >\n          {question.options.map((option, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <RadioGroupItem value={option} id={`option-${index}`} />\n              <Label htmlFor={`option-${index}`}>{option}</Label>\n            </div>\n          ))}\n        </RadioGroup>\n\n        {showExplanation && (\n          <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n            <p className=\"font-medium\">Explanation:</p>\n            <p className=\"text-muted-foreground\">{question.explanation}</p>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-between\">\n        {!showExplanation && (\n          <Button\n            onClick={() => setShowExplanation(true)}\n            variant=\"outline\"\n            disabled={!answers[currentQuestion]}\n          >\n            Show Explanation\n          </Button>\n        )}\n        <Button\n          onClick={handleNext}\n          disabled={!answers[currentQuestion] || savingResult}\n          className=\"ml-auto\"\n        >\n          {savingResult && (\n            <BarLoader className=\"mt-4\" width={\"100%\"} color=\"gray\" />\n          )}\n          {currentQuestion < quizData.length - 1\n            ? \"Next Question\"\n            : \"Finish Quiz\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}